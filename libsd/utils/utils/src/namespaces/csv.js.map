{"version":3,"sources":["../../../../../../libs/utils/src/namespaces/csv.ts"],"sourcesContent":["import Papa from \"papaparse\";\n\nimport { Json } from \"./types\";\n\nexport const parseCSV = async (string: string) => {\n  return new Promise<Json[]>((resolve, reject) => {\n    Papa.parse(string, {\n      header: true,\n      skipEmptyLines: true,\n      complete: (results) => resolve(results.data as Json[]),\n      error: (error: Error) => reject(error),\n    });\n  });\n};\n\n/**\n * Parser for cases when we receive an array like structure f.e. a in the LinkedIn Profile.csv import\n * @param csvEntry array-like entry such as [TAG:https://some.link,TAG:https://someother.link]\n * @returns\n */\nexport const parseArrayLikeCSVEntry = (csvEntry: string) =>\n  csvEntry.replace(/^\\[/, \"\").replace(/$\\]/, \"\").split(\",\");\n"],"names":["parseArrayLikeCSVEntry","parseCSV","string","Promise","resolve","reject","Papa","parse","header","skipEmptyLines","complete","results","data","error","csvEntry","replace","split"],"mappings":";;;;;;;;;;;IAoBaA,sBAAsB;eAAtBA;;IAhBAC,QAAQ;eAARA;;;;oEAJI;AAIV,MAAMA,WAAW,OAAOC;IAC7B,OAAO,IAAIC,QAAgB,CAACC,SAASC;QACnCC,kBAAI,CAACC,KAAK,CAACL,QAAQ;YACjBM,QAAQ;YACRC,gBAAgB;YAChBC,UAAU,CAACC,UAAYP,QAAQO,QAAQC,IAAI;YAC3CC,OAAO,CAACA,QAAiBR,OAAOQ;QAClC;IACF;AACF;AAOO,MAAMb,yBAAyB,CAACc,WACrCA,SAASC,OAAO,CAAC,OAAO,IAAIA,OAAO,CAAC,OAAO,IAAIC,KAAK,CAAC"}